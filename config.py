import math

use_horizontal_flips = True
use_vertical_flips = True
rot_90 = True
rpn_stride = 16
anchor_box_scales = [128, 256, 512]
anchor_box_ratios = [[1, 1], [1./math.sqrt(2), 2./math.sqrt(2)], [2./math.sqrt(2), 1./math.sqrt(2)]]
im_size = 600


verbose = True

# anchor box scales
anchor_box_scales = [128, 256, 512]

# anchor box ratios
anchor_box_ratios = [[1, 1], [1./math.sqrt(2), 2./math.sqrt(2)], [2./math.sqrt(2), 1./math.sqrt(2)]]

# size to resize the smallest side of the image
im_size = 600

# image channel-wise mean to subtract
img_channel_mean = [103.939, 116.779, 123.68]
img_scaling_factor = 1.0

# number of ROIs at once
num_rois = 4

# stride at the RPN (this depends on the network configuration)
rpn_stride = 16



# scaling the stdev
std_scaling = 4.0
classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

# overlaps for RPN
rpn_min_overlap = 0.3
rpn_max_overlap = 0.7

# overlaps for classifier ROIs
classifier_min_overlap = 0.1
classifier_max_overlap = 0.5

# placeholder for the class mapping, automatically generated by the parser
class_mapping = None

#location of pretrained weights for the base network 
# weight files can be found at:
# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels_notop.h5
# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5

model_path = 'model_frcnn.vgg.hdf5'

num_epochs = 10

epoch_length = 200

balanced_classes = False